React Router y Redux
    Es una libería 
    => Instalación:
        npm install react-router-dom --save

ROUTER
    => En la carpeta routes se añaden las rutas que se necesitarán para la aplicación. 
        Estas rutas se añadirán con el compoente 'Route' y estas deben estar encapsuladas dentro del componente BrowserRouter del paquete de react-router-dom. 
    => Definición:
        Para definir una ruta con el componente Route debemos pasarle las props de:
            * path => para indicar la url
            * exact => Si se requiere que funcione única y exactamente con la url que se le indique
            * component => para indicarle el componente que va a renderizar.

hitoryApiFallback
    => Configuración del entorno de desarrollo local para que pueda funcionar con el curso de rutas. 
        Se realiza en el archivo webpack.config.js y se añade el siguiente código antes de plugins: 
        => module.exports = {
                {/*...*/}
                devServer: {  
                    historyApiFallback: true,  
                },
                {/*...*/}
            }

Atributos para los Route Objectos:

path: la ruta en la que se renderizará el componente en forma de cadena de texto
exact: un booleano para definir si queremos que la ruta tiene o no que ser exacta para renderizar un componente. Eg: /index !== /index/all.
strict: un booleano para definir si queremos que el último slash sea tomado en cuenta para renderizar un componente. Eg: /index !== /index/.
sensitive: un booleano para definir si queremos distinguir entre minúsculas y mayúsculas, y tomar esto en cuenta para renderizar un componente. Eg: /index !== /Index
component: recibe un componente a renderizar. Crea un nuevo elemento de React cada vez. Esto causa que el componente se monte y desmonte cada vez (no actualiza).
render: recibe un método que retorna un componente. A diferencia de component no remonta el componente.

Para asegurar que nuestras rutas solamente se rendericen con la que haga match con la url debemos encapsular las rutas dentro del componente .

Fragment nos permite no añadir elementos extra al DOM, podemos utilizar Fragment de 2 maneras:
 *Añadiendo el componente o .
 *O implemente encapsulando nuestros elementos dentro de <>.

REDUX: Es una librería escrita en JavaScript, basada en la arquitectura Flux y creada por Dan Abramov. Se basa en 3 principios fundamentales:
    * Solamente hay una fuente de la verdad
    * El estado es de solo lectura
    * Solamente podemos utilizar funciones puras
Nuestra UI va a activar un action, esta acción va a ejecutar un reducer para modificar la rmación del store, y al aaualizarse el store la UI se va a modificar

¿Que es Redux?

    Redux nos permite tener un contenedor predecible del estado en aplicaciones creadas con JavaScript, Nos ayuda a escribir aplicaciones que se comportan de una manera consistente, 
    Esto significa que podemos utilizar esta lógica en aplicaciones del lado del cliente, trabajar del lado del servidor o crear aplicaciones para dispositivos móviles.

    Uno de los principales uso que tiene Redux es con React pero puede ser implementado en cualquier librería o proyecto que este construido con JavaScript, lo cual incluye a 
    Angular, Vue o algún otro framework o librería.

    Redux nace de la arquitectura Flux, tomando inspiración del lenguaje funcional Elm y es creado por Dan Abramov y Andrew Clark en el 2015, 
    Hoy en día es una de las librerías más utilizadas para el manejo del flujo de la información en aplicaciones.

    Una de las principales motivaciones para crear Redux nace en resolver un problema y era el manejo del estado y el flujo de nuestras aplicaciones creadas en JavaScript.
     Redux propone una forma de manejar el estado donde podamos controlar cómo vamos a interactuar con otros elementos (llamadas a un API) o interacciones dentro de nuestra 
     aplicación, teniendo en cuenta esto, Redux intenta de predecir las mutaciones que pueda sufrir el estado, creando restricciones de cuando y como pueden ser ejecutadas las 
     actualizaciones en nuestras aplicaciones.

    Redux es una librería muy pequeña que se puede incorporar en cualquier proyecto construido en JavaScript y se basa en tres principios:

    => Única fuente de la verdad:
        Nuestra aplicación solo debe de tener un único Store y es la única fuente de información.

    => El estado es de solo lectura
        La única forma de modificar el estado es emitiendo un acción, este objeto describe lo que va a ocurrir.

    => Los cambios se realizan con funciones puras
        Para realizar cambios al estado es necesario utilizar Reducers los cuales son funciones puras que toman el estado anterior, una acción y devuelve un nuevo estado con 
        las modificaciones necesarias.

    => Instalación:
        => npm install redux react-redux --save
        
    Provider:
        Recuerden que se tiene que encapsular nuestra aplicación dentro de un provider, porque nada fuera del provider podrá acceder al store.
        El <Provider /> hace que la store de Redux esté disponible para cualquier componente anidado que se haya incluido en la función connect().
        Dado que cualquier componente React en una aplicación React Redux se puede conectar, la mayoría de las aplicaciones mostrarán un 
        <Provider> 'en el nivel superior, con el árbol de componentes completo de la aplicación dentro de él. 
        Normalmente, no puede usar un componente conectado a menos que esté anidado dentro de un<Provider>`.

    *Esta basado en el patrón de diseño Flux

    *Toda la data de la aplicación, se encuentra en una estructura previamente definida.

    *Toda la informción se encontrará almacenada en un único lugar llamado STORE.

    *El STORE jamas se modifica de forma directa.

    *Interacciones de usuario y/o código, dispara acciones que describen qué sucedió

    *El valor actual de la información de la aplicación se llama - State

    *Un nuevo estado es creado, en base a la combinanción del viejo estado y una acción, por una función llamada Reducer.

Para crear un Store necesitamos llamar a la función createStore del paquete de redux pasándole los parámetros del reducer y initialState.
Para conectar un componente a Redux vamos a necesitar importar connect de react-redux, connect va a aceptar dos parámetros:

    mapStateToProps: es una función que le va a indicar al provider qué información necesitamos del store.
    mapDispatchToProps: es un objeto con las distintas funciones para ejecutar una action en Redux.

Un action de Redux va a contener dos elementos:
    type: para indicar la acción que se va a ejecutar.
    payload: es la información que estamos mandando al reducer.
    Dentro de los reducers usaremos un switch para separar la lógica por cada tipo de acción que tendremos en Redux.


Muchas veces la mejor opción no es descargar un paquete de npm ya que podemos ver la documentación, entender cómo funciona y nosotros implementar el 
código necesario para nuestro caso, ya que instalar todo el paquete puede volver más pesado nuestro proyecto.

Para nuestro servicio que llamará a Gravatar vamos a crear la carpeta utils y dentro añadir el archivo gravatar.js.

Redux Dev Tools nos va a servir mucho para entender mejor el flujo de nuestra información en nuestra aplicación y poder realizar debugging de manera sencilla.

Solamente necesitas instalar la extensión según el navegador que tengas:

Chrome
Firefox
Una vez instalado dentro de nuestro index.js vamos a añadir el siguiente código:

// importamos compose  
import { createStore, compose } from ‘redux’;  
...  
  
  
const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose  
  
const store = createStore(reducer, initialState, composeEnhancers  